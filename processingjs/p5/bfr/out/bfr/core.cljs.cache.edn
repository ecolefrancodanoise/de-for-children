{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name bfr.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {my {:protocol-inline nil, :meta {:file "/home/mac/Dropbox/projects/bfr/src/bfr/core.cljs", :line 127, :column 14, :end-line 127, :end-column 16, :export true, :arglists (quote ([]))}, :name bfr.core/my, :variadic false, :file "src/bfr/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, draw-state {:protocol-inline nil, :meta {:file "/home/mac/Dropbox/projects/bfr/src/bfr/core.cljs", :line 117, :column 7, :end-line 117, :end-column 17, :arglists (quote ([state]))}, :name bfr.core/draw-state, :variadic false, :file "src/bfr/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, update-state {:protocol-inline nil, :meta {:file "/home/mac/Dropbox/projects/bfr/src/bfr/core.cljs", :line 97, :column 7, :end-line 97, :end-column 19, :arglists (quote ([{:keys [planets space-ship dt t G launch-t], :as state}]))}, :name bfr.core/update-state, :variadic false, :file "src/bfr/core.cljs", :end-column 19, :method-params ([p__8528]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [planets space-ship dt t G launch-t], :as state}]))}, update-planet {:protocol-inline nil, :meta {:file "/home/mac/Dropbox/projects/bfr/src/bfr/core.cljs", :line 79, :column 7, :end-line 79, :end-column 20, :arglists (quote ([dt]))}, :name bfr.core/update-planet, :variadic false, :file "src/bfr/core.cljs", :end-column 20, :method-params ([dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dt]))}, brake-ship {:protocol-inline nil, :meta {:file "/home/mac/Dropbox/projects/bfr/src/bfr/core.cljs", :line 90, :column 7, :end-line 90, :end-column 17, :arglists (quote ([{sxp :xp, syp :yp, sxpp :xpp, sypp :ypp, ship-name :name, :as ship} {mxp :xp, myp :yp, planet-name :name}]))}, :name bfr.core/brake-ship, :variadic false, :file "src/bfr/core.cljs", :end-column 17, :method-params ([p__8518 p__8519]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{sxp :xp, syp :yp, sxpp :xpp, sypp :ypp, ship-name :name, :as ship} {mxp :xp, myp :yp, planet-name :name}]))}, sqrt {:protocol-inline nil, :meta {:file "/home/mac/Dropbox/projects/bfr/src/bfr/core.cljs", :line 55, :column 7, :end-line 55, :end-column 11, :arglists (quote ([x]))}, :name bfr.core/sqrt, :variadic false, :file "src/bfr/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, braking? {:protocol-inline nil, :meta {:file "/home/mac/Dropbox/projects/bfr/src/bfr/core.cljs", :line 87, :column 7, :end-line 87, :end-column 15, :arglists (quote ([{:keys [brake-start brake-end]} t]))}, :name bfr.core/braking?, :variadic false, :file "src/bfr/core.cljs", :end-column 15, :method-params ([p__8513 t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [brake-start brake-end]} t]))}, pow {:protocol-inline nil, :meta {:file "/home/mac/Dropbox/projects/bfr/src/bfr/core.cljs", :line 56, :column 7, :end-line 56, :end-column 10, :arglists (quote ([x n]))}, :name bfr.core/pow, :variadic false, :file "src/bfr/core.cljs", :end-column 10, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n]))}, calc-xpp-and-ypp {:protocol-inline nil, :meta {:file "/home/mac/Dropbox/projects/bfr/src/bfr/core.cljs", :line 68, :column 7, :end-line 68, :end-column 23, :arglists (quote ([G]))}, :name bfr.core/calc-xpp-and-ypp, :variadic false, :file "src/bfr/core.cljs", :end-column 23, :method-params ([G]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G]))}, draw-planets {:protocol-inline nil, :meta {:file "/home/mac/Dropbox/projects/bfr/src/bfr/core.cljs", :line 60, :column 7, :end-line 60, :end-column 19, :arglists (quote ([planets]))}, :name bfr.core/draw-planets, :variadic false, :file "src/bfr/core.cljs", :end-column 19, :method-params ([planets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([planets]))}, setup {:protocol-inline nil, :meta {:file "/home/mac/Dropbox/projects/bfr/src/bfr/core.cljs", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([]))}, :name bfr.core/setup, :variadic false, :file "src/bfr/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:y :launch-t :ypp :planets :fn :color :xpp :name :brake-end :m :dt :rgb :update :space-ship :yp :size :setup :middleware :host :G :host-id :no-start :t :x :xp :draw :brake-start}, :order [:rgb :planets :space-ship :t :dt :launch-t :G :y :ypp :color :xpp :name :m :yp :size :x :xp :brake-end :brake-start :host :update :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}